// Copyright 2020 PAL Robotics S.L.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
 * Author: Bence Magyar, Enrique Fern√°ndez, Manuel Meraz
 */

#ifndef ZOE_CONTROLLER__ZOE_CONTROLLER_HPP_
#define ZOE_CONTROLLER__ZOE_CONTROLLER_HPP_

#include <chrono>
#include <cmath>
#include <memory>
#include <queue>
#include <string>
#include <vector>

#include "controller_interface/controller_interface.hpp"
#include "geometry_msgs/msg/twist.hpp"
#include "geometry_msgs/msg/twist_stamped.hpp"
#include "hardware_interface/handle.hpp"
#include "nav_msgs/msg/odometry.hpp"
#include "rclcpp/rclcpp.hpp"
#include "rclcpp_lifecycle/state.hpp"
#include "realtime_tools/realtime_box.h"
#include "realtime_tools/realtime_buffer.h"
#include "realtime_tools/realtime_publisher.h"
#include "tf2_msgs/msg/tf_message.hpp"
#include "zoe_controller/visibility_control.h"
#include "zoe_controller/controller.hpp"
// auto-generated by generate_parameter_library
#include "zoe_controller_parameters.hpp"

#include "zoe2_interfaces/msg/drive_arc.hpp"
#include "zoe2_interfaces/srv/drive_command.hpp"

namespace zoe_controller {

class ZoeController : public controller_interface::ControllerInterface {

  public:
    using Twist = geometry_msgs::msg::TwistStamped;

    Params mParams;
    std::shared_ptr<ParamListener> mParamListener;

    std::shared_ptr<rclcpp::Subscription<zoe2_interfaces::msg::DriveArc>>
        mCommandVelSubscriber = nullptr;

    rclcpp::Service<zoe2_interfaces::srv::DriveCommand>::SharedPtr
        drive_command_service;
    


    std::mutex currDriveArcMutex;
    zoe2_interfaces::msg::DriveArc::SharedPtr currDriveArc;
    rclcpp::TimerBase::SharedPtr currDriveTimer;
    std::shared_ptr<DrivingController> controller;

    struct WheelHandle {
      public:
        std::reference_wrapper<hardware_interface::LoanedStateInterface>
            feedback_vel;
        std::reference_wrapper<hardware_interface::LoanedCommandInterface>
            cmd_velocity;

        WheelHandle(
            std::reference_wrapper<hardware_interface::LoanedStateInterface>
                fbv,
            std::reference_wrapper<hardware_interface::LoanedCommandInterface>
                cmd_vel)
            : feedback_vel(fbv), cmd_velocity(cmd_vel) {}
    };
    std::shared_ptr<WheelHandle> frontLeft = nullptr, frontRight = nullptr,
                                 backLeft = nullptr, backRight = nullptr;


    struct YawHandle {
      public:
        std::reference_wrapper<hardware_interface::LoanedStateInterface>
            yaw;
        // std::reference_wrapper<hardware_interface::LoanedCommandInterface>
        //     cmd_velocity;

        YawHandle(
            std::reference_wrapper<hardware_interface::LoanedStateInterface>
                fb
            // std::reference_wrapper<hardware_interface::LoanedCommandInterface>
            //     cmd_vel
            )
            : yaw(fb) {}
    };

    std::shared_ptr<YawHandle> frontYaw, backYaw;        

    std::shared_ptr<WheelHandle> getWheelHandleByName(const std::string &name);
    std::shared_ptr<YawHandle> getYawStateIface(const std::string &name);

    // Timeout to consider cmd_vel commands old
    std::chrono::milliseconds cmd_vel_timeout_{500};
    bool subscriber_is_active_ = false;
    rclcpp::Subscription<Twist>::SharedPtr velocity_command_subscriber_ = nullptr;
    rclcpp::Subscription<geometry_msgs::msg::Twist>::SharedPtr
        velocity_command_unstamped_subscriber_ = nullptr;

    realtime_tools::RealtimeBox<std::shared_ptr<Twist>> received_velocity_msg_ptr_{nullptr};

    std::queue<Twist> previous_commands_;  // last two commands

    rclcpp::Time previous_update_timestamp_{0};

    bool use_stamped_vel_ = false;
    

    ZOE_CONTROLLER_PUBLIC
    ZoeController();

    ZOE_CONTROLLER_PUBLIC
    controller_interface::InterfaceConfiguration
    command_interface_configuration() const override;

    ZOE_CONTROLLER_PUBLIC
    controller_interface::InterfaceConfiguration
    state_interface_configuration() const override;

    ZOE_CONTROLLER_PUBLIC
    controller_interface::return_type
    update(const rclcpp::Time &time, const rclcpp::Duration &period) override;

    ZOE_CONTROLLER_PUBLIC
    controller_interface::CallbackReturn on_init() override;

    ZOE_CONTROLLER_PUBLIC
    controller_interface::CallbackReturn
    on_configure(const rclcpp_lifecycle::State &previous_state) override;

    ZOE_CONTROLLER_PUBLIC
    controller_interface::CallbackReturn
    on_activate(const rclcpp_lifecycle::State &previous_state) override;

    ZOE_CONTROLLER_PUBLIC
    controller_interface::CallbackReturn
    on_deactivate(const rclcpp_lifecycle::State &previous_state) override;

    ZOE_CONTROLLER_PUBLIC
    controller_interface::CallbackReturn
    on_cleanup(const rclcpp_lifecycle::State &previous_state) override;

    ZOE_CONTROLLER_PUBLIC
    controller_interface::CallbackReturn
    on_error(const rclcpp_lifecycle::State &previous_state) override;

    ZOE_CONTROLLER_PUBLIC
    controller_interface::CallbackReturn
    on_shutdown(const rclcpp_lifecycle::State &previous_state) override;

    rclcpp::Logger log();

    private:
        bool test_hardware = false;
};
} // namespace zoe_controller
#endif // ZOE_CONTROLLER__ZOE_CONTROLLER_HPP_
