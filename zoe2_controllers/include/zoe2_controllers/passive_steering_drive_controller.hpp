// Custom controller for passive steering drive, such as the one used in the ZOE2 robot.
// Built for compatibility with ROS2 Control.

// Apply header guards
#ifndef PASSIVE_STEERING_DRIVE_CONTROLLER_HPP
#define PASSIVE_STEERING_DRIVE_CONTROLLER_HPP

// Include controller interface and visibility control headers
#include "controller_interface/controller_interface.hpp"
#include "zoe2_controllers/visibility_control.h"

// auto-generated by generate_parameter_library
#include "passive_steering_drive_controller_paraeters.hpp"

// Define the namespace for the controller
namespace passive_steering_drive_controller
{
// Define the class for the controller, extending the ControllerInterface class
class PassiveSteeringDriveController : public controller_interface::ControllerInterface
{
// Add a constructor without parameters and the following public methods overriding the ControllerInterface definition: 
// on_init, command_interface_configuration, state_interface_configuration, on_configure, on_activate, on_deactivate, update. 
public:
    ZOE2_CONTROLLERS_PUBLIC
    PassiveSteeringDriveController();
    
    ZOE2_CONTROLLERS_PUBLIC
    controller_interface::return_type on_init() override;
    
    ZOE2_CONTROLLERS_PUBLIC
    controller_interface::InterfaceConfiguration command_interface_configuration() const override;
    
    ZOE2_CONTROLLERS_PUBLIC
    controller_interface::InterfaceConfiguration state_interface_configuration() const override;
    
    ZOE2_CONTROLLERS_PUBLIC
    controller_interface::return_type on_configure(const rclcpp_lifecycle::State &previous_state) override;
    
    ZOE2_CONTROLLERS_PUBLIC
    controller_interface::return_type on_activate(const rclcpp_lifecycle::State &previous_state) override;
    
    ZOE2_CONTROLLERS_PUBLIC
    controller_interface::return_type on_deactivate(const rclcpp_lifecycle::State &previous_state) override;
    
    ZOE2_CONTROLLERS_PUBLIC
    controller_interface::return_type update(const rclcpp::Time &time, const rclcpp::Duration &period) override;
// Add two protected string vectors to store joint and interface name parameters
protected:
    std::shared_ptr<ParamListener> param_listener_;
    Params params_;
};
} // namespace passive_steering_drive_controller

#endif // PASSIVE_STEERING_DRIVE_CONTROLLER_HPP